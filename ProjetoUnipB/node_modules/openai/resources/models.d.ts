import * as Core from 'openai/core';
import { APIResource } from 'openai/resource';
<<<<<<< HEAD
import * as ModelsAPI from 'openai/resources/models';
import { Page } from 'openai/pagination';
export declare class Models extends APIResource {
    /**
     * Retrieves a model instance, providing basic information about the model such as
     * the owner and permissioning.
     */
    retrieve(model: string, options?: Core.RequestOptions): Core.APIPromise<Model>;
    /**
     * Lists the currently available models, and provides basic information about each
     * one such as the owner and availability.
     */
    list(options?: Core.RequestOptions): Core.PagePromise<ModelsPage, Model>;
    /**
     * Delete a fine-tuned model. You must have the Owner role in your organization to
     * delete a model.
     */
    del(model: string, options?: Core.RequestOptions): Core.APIPromise<ModelDeleted>;
=======
import * as API from './index.js';
import { Page } from 'openai/pagination';
export declare class Models extends APIResource {
  /**
   * Retrieves a model instance, providing basic information about the model such as
   * the owner and permissioning.
   */
  retrieve(model: string, options?: Core.RequestOptions): Core.APIPromise<Model>;
  /**
   * Lists the currently available models, and provides basic information about each
   * one such as the owner and availability.
   */
  list(options?: Core.RequestOptions): Core.PagePromise<ModelsPage, Model>;
  /**
   * Delete a fine-tuned model. You must have the Owner role in your organization.
   */
  del(model: string, options?: Core.RequestOptions): Core.APIPromise<ModelDeleted>;
>>>>>>> 011312d5750e409ae680354d5bcc999303d0b70a
}
/**
 * Note: no pagination actually occurs yet, this is for forwards-compatibility.
 */
<<<<<<< HEAD
export declare class ModelsPage extends Page<Model> {
}
=======
export declare class ModelsPage extends Page<Model> {}
type _ModelsPage = ModelsPage;
>>>>>>> 011312d5750e409ae680354d5bcc999303d0b70a
/**
 * Describes an OpenAI model offering that can be used with the API.
 */
export interface Model {
<<<<<<< HEAD
    /**
     * The model identifier, which can be referenced in the API endpoints.
     */
    id: string;
    /**
     * The Unix timestamp (in seconds) when the model was created.
     */
    created: number;
    /**
     * The object type, which is always "model".
     */
    object: 'model';
    /**
     * The organization that owns the model.
     */
    owned_by: string;
}
export interface ModelDeleted {
    id: string;
    deleted: boolean;
    object: string;
}
export declare namespace Models {
    export import Model = ModelsAPI.Model;
    export import ModelDeleted = ModelsAPI.ModelDeleted;
    export import ModelsPage = ModelsAPI.ModelsPage;
}
//# sourceMappingURL=models.d.ts.map
=======
  /**
   * The model identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The date and time when the model was created.
   */
  created: number;
  /**
   * The object type, which is always "model".
   */
  object: string;
  /**
   * The organization that owns the model.
   */
  owned_by: string;
}
export interface ModelDeleted {
  id: string;
  deleted: boolean;
  object: string;
}
export declare namespace Models {
  export import Model = API.Model;
  export import ModelDeleted = API.ModelDeleted;
  type ModelsPage = _ModelsPage;
}
export {};
//# sourceMappingURL=models.d.ts.map
>>>>>>> 011312d5750e409ae680354d5bcc999303d0b70a
